{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["// middleware.ts\r\nimport { NextResponse } from \"next/server\";\r\nimport type { NextRequest } from \"next/server\";\r\n\r\n// Define protected routes\r\nconst protectedRoutes = [\"/messages\", \"/settings\", \"/friends\", \"/\"];\r\n\r\nexport function middleware(request: NextRequest) {\r\n  const token = request.cookies.get(\"hikeToken\")?.value; // ðŸ‘ˆ replace 'token' with your cookie name\r\n\r\n  const { pathname } = request.nextUrl;\r\n\r\n  // If user is trying to access protected route and is not logged in\r\n  if (protectedRoutes.some((route) => pathname.startsWith(route)) && !token) {\r\n    const loginUrl = new URL(\"/login\", request.url);\r\n    return NextResponse.redirect(loginUrl);\r\n  }\r\n\r\n  // If user is logged in and tries to go to login page, redirect to home\r\n  if (pathname === \"/login\" && token) {\r\n    const homeUrl = new URL(\"/\", request.url);\r\n    return NextResponse.redirect(homeUrl);\r\n  }\r\n\r\n  // Otherwise, continue\r\n  return NextResponse.next();\r\n}\r\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;AAAA;;AAGA,0BAA0B;AAC1B,MAAM,kBAAkB;IAAC;IAAa;IAAa;IAAY;CAAI;AAE5D,SAAS,WAAW,OAAoB;IAC7C,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,cAAc,OAAO,2CAA2C;IAElG,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,mEAAmE;IACnE,IAAI,gBAAgB,IAAI,CAAC,CAAC,QAAU,SAAS,UAAU,CAAC,WAAW,CAAC,OAAO;QACzE,MAAM,WAAW,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC9C,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,uEAAuE;IACvE,IAAI,aAAa,YAAY,OAAO;QAClC,MAAM,UAAU,IAAI,IAAI,KAAK,QAAQ,GAAG;QACxC,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,sBAAsB;IACtB,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}